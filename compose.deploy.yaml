services:
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile.deploy
    env_file:
      - .env
    ports:
      - ${FRONTEND_PORT}:${FRONTEND_PORT} 
    depends_on:
      - api

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    env_file: 
      - .env
    environment:
      NODE_ENV: production
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    ports:
      - ${API_PORT}:${API_PORT}
    depends_on:
      db:
        condition: service_healthy 

  db:
    image: postgres:17
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./db/01-init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./db/02-default_seed.sql:/docker-entrypoint-initdb.d/02-default_seed.sql
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - ${DB_PORT}:${DB_PORT}

volumes:
  db-data: