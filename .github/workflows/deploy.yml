name: Deploy to EC2

on:
  push:
    branches: [ 13-separate-docker-compose-to-dev-and-deploy ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Install SSH key
      env:
        PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
      run:
        echo "$PRIVATE_KEY" > github-ec2.pem && chmod 600 github-ec2.pem

    - name: Clone repository
      env:
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        ssh -o StrictHostKeyChecking=no -i github-ec2.pem ${USER}@${HOST} '
        echo "Current directory: $(pwd)"
        echo "Listing home directory:"
        ls -la ~

        REPO_URL="https://github.com/FrankenBunny/marquee-rental-webapp"
        BRANCH="13-separate-docker-compose-to-dev-and-deploy"
        REPO_DIR="$HOME/marquee-rental-webapp"

        if [ -d "$REPO_DIR/.git" ]; then
          cd "$REPO_DIR"
          git fetch origin
          git checkout "$BRANCH"
          git reset --hard origin/"$BRANCH"
        else
          git clone "$REPO_URL"
          cd "$REPO_DIR"
        fi
        '

    - name: Create .env file
      env:
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
        FRONTEND_PORT: ${{ secrets.FRONTEND_PORT }}
        API_PORT: ${{ secrets.API_PORT }}
        DB_PORT: ${{ secrets.DB_PORT }}
        POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      run: |
        touch .env
        echo "FRONTEND_PORT=${{ secrets.FRONTEND_PORT }}" > .env
        echo "API_PORT=${{ secrets.API_PORT }}" >> .env
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
        echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
        
        scp -v -i github-ec2.pem -o StrictHostKeyChecking=no .env ${USER}@${HOST}:~/marquee-rental-webapp/.env

    - name: Build containers
      env:
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        ssh -o StrictHostKeyChecking=no -i github-ec2.pem ${USER}@${HOST} bash -s << EOF
        
        cd marquee-rental-webapp

        echo "Building containers"
        docker compose down
        docker compose -f compose.deploy.yaml up -d --build

        EOF

#    - name: Deploy to EC2
#      env:
#        PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
#        HOST: ${{ secrets.EC2_HOST }}
#        USER: ${{ secrets.EC2_USER }}
#        FRONTEND_PORT : ${{ secrets.FRONTEND_PORT }}
#        API_PORT: ${{ secrets.API_PORT }}
#        DB_PORT: ${{ secrets.DB_PORT }}
#        POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
#        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
#        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
#        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
#        ENV_FILE: |
#          FRONTEND_PORT=${{ secrets.FRONTEND_PORT }}
#          API_PORT="${API_PORT}"
#          DB_PORT="${DB_PORT}"
#          POSTGRES_HOST="${POSTGRES_HOST}"
#          POSTGRES_DB="${POSTGRES_DB}"
#          POSTGRES_PASSWORD="${POSTGRES_PASSWORD}"
#          POSTGRES_USER="${POSTGRES_USER}"
#
#      run: |
#        echo "Current directory: $(pwd)"
#        echo "Listing home directory:"
#        ls -la ~
#
#        echo "Pulling latest code from main"
#        REPO_URL="https://github.com/FrankenBunny/marquee-rental-webapp"
#        BRANCH="main"
#        REPO_DIR="$HOME/marquee-rental-webapp"
#
#        if [ -d "$REPO_DIR/.git" ]; then
#          cd "$REPO_DIR"
#          git pull origin "$BRANCH"
#        else
#          git clone "$REPO_URL" "$REPO_DIR"
#          cd "$REPO_DIR"
#        fi
#
#        echo "Installing docker and docker compose"
#        sudo apt-get update
#        sudo apt-get install -y ca-certificates curl gnupg
#        sudo install -m 0755 -d /etc/apt/keyrings
#        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
#        sudo chmod a+r /etc/apt/keyrings/docker.asc
#
#        echo \
#          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
#          $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
#          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#        sudo apt-get update
#
#        sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
#
#        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#        sudo chmod +x /usr/local/bin/docker-compose
#
#        echo "Exporting secrets"
#        export FRONTEND_PORT="${FRONTEND_PORT}"
#        export API_PORT="${API_PORT}"
#        export DB_PORT="${DB_PORT}"
#        export POSTGRES_HOST="${POSTGRES_HOST}"
#        export POSTGRES_DB="${POSTGRES_DB}"
#        export POSTGRES_PASSWORD="${POSTGRES_PASSWORD}"
#        export POSTGRES_USER="${POSTGRES_USER}"
#
#        echo "Running docker-compose up..."
#        docker-compose down
#        docker-compose up -d --build
#        EOF