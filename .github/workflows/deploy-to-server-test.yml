name: Deploy to EC2

on:
  push:
    branches: [ 18-implement-api-data-fetching-logic ]

jobs:
  deploy-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Install SSH key
      env:
        PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
      run:
        echo "$PRIVATE_KEY" > github-ec2.pem && chmod 600 github-ec2.pem

    - name: Clone repository
      env:
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        ssh -o StrictHostKeyChecking=no -i github-ec2.pem ${USER}@${HOST} '
        echo "Current directory: $(pwd)"
        echo "Listing home directory:"
        ls -la ~

        REPO_URL="https://github.com/FrankenBunny/marquee-rental-webapp"
        BRANCH="18-implement-api-data-fetching-logic"
        REPO_DIR="$HOME/marquee-rental-webapp"

        if [ -d "$REPO_DIR/.git" ]; then
          cd "$REPO_DIR"
          git fetch origin
          git checkout "$BRANCH"
          git reset --hard origin/"$BRANCH"
        else
          git clone "$REPO_URL"
          cd "$REPO_DIR"
        fi
        '

    - name: Create .env file
      env:
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
        FRONTEND_PORT: ${{ secrets.FRONTEND_PORT }}
        API_PORT: ${{ secrets.API_PORT }}
        DB_PORT: ${{ secrets.DB_PORT }}
        POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      run: |
        touch .env
        echo "FRONTEND_PORT=${{ secrets.FRONTEND_PORT }}" > .env
        echo "API_PORT=${{ secrets.API_PORT }}" >> .env
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
        echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
        
        scp -v -i github-ec2.pem -o StrictHostKeyChecking=no .env ${USER}@${HOST}:~/marquee-rental-webapp/.env

    - name: Build containers
      env:
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        ssh -o StrictHostKeyChecking=no -i github-ec2.pem ${USER}@${HOST} bash -s << EOF
        
        cd marquee-rental-webapp

        echo "Building containers"
        sudo docker compose down
        sudo docker compose -f compose.deploy.yaml up -d --build

        rm -f .env
        EOF

    - name: Remove temporary files
      run: |
        rm -f .env
        rm -f github-ec2.pem