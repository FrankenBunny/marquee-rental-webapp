services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      NODE_ENV: development
    ports:
      - ${FRONTEND_PORT}:${FRONTEND_PORT} 
    depends_on:
      - backend

  backend:
    build:
      context: ./backend/api
      dockerfile: Dockerfile
    env_file: 
      - .env
    environment:
      NODE_ENV: development
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    ports:
      - ${API_PORT}:${API_PORT}
    depends_on:
      db:
        condition: service_healthy 

  db:
    image: postgres
    restart: always
    env_file: 
      - .env
    volumes:
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backend/db/seed.sql:/docker-entrypoint-initdb.d/seed.sql
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - ${DB_PORT}:${DB_PORT}

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    profiles: [tools]
    restart: always
    ports:
      - ${PGADMIN_PORT}:${PGADMIN_PORT}
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    volumes:
      - pgadmin-data:/var/lib/pgadmin


volumes:
  db-data:
  pgadmin-data: